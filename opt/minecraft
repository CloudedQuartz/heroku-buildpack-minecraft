#!/usr/bin/env bash

mc_port=25566
port=${1:-${PORT:-8080}}

# Start the TCP tunnel
if [ ! -z OVPN_CONFIG ]; then
  openvpn_cmd="openvpn --config config.ovpn ${mc_port}"
  echo "Starting openvpn..."
  eval "$openvpn_cmd | tee openvpn.log &"
  openvpn_pid=$!
else
  echo "NEED OPENVPN CONFIG"
  exit 1
fi

# Do an inline sync first, then start the background job
echo "Starting sync..."
bin/sync
if [ "$READ_ONLY" != "true" ]; then
  eval "while true; do sleep ${AWS_SYNC_INTERVAL:-60}; bin/sync; done &"
  sync_pid=$!
fi

# create server config
echo "server-port=${mc_port}" >> /app/server.properties
for f in whitelist banned-players banned-ips ops; do
  test ! -f $f.json && echo -n "[]" > $f.json
done

limit=$(ulimit -u)
case $limit in
  512)   # 2X Dyno
  heap="768m"
  ;;
  32768) # PX Dyno
  heap="4g"
  ;;
  *)     # 1X Dyno
  heap="384m"
  ;;
esac

# Online mode configration
# Check if onlinemode is defined in heroku config varables
online_mode=${ONLINE_MODE:-"true"}
echo "online-mode=${online_mode}" >> /app/server.properties
echo "Setting online mode to ${online_mode}"

echo "Starting: minecraft ${mc_port}"
eval "screen -L -h 2048 -dmS minecraft java -Xmx${heap} -Xms${heap} -jar minecraft.jar nogui"
main_pid=$!

# Flush the logfile every second, and ensure that the logfile exists
screen -X "logfile 1" && sleep 1

echo "Tailing log"
eval "tail -f screenlog.0 &"
tail_pid=$!

trap "kill $openvpn_pid $main_pid $sync_pid $tail_pid" SIGTERM
trap "kill -9 $openvpn_pid $main_pid $sync_pid $tail_pid; exit" SIGKILL

eval "ruby -rwebrick -e'WEBrick::HTTPServer.new(:BindAddress => \"0.0.0.0\", :Port => ${port}, :MimeTypes => {\"rhtml\" => \"text/html\"}, :DocumentRoot => Dir.pwd).start'"
